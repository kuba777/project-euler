#!/usr/bin/env python
# -*- coding: utf-8 -*-

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
# first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred
# divisors?

# Answer and time
# 76576500 - 24.4s


def is_prime(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True


def primes(n):
    """
    returns list of first n primes (3k -> 7s)
    """
    primes = []
    i = 2
    while len(primes) < n:
        if is_prime(i):
            primes.append(i)
        i += 1
    return primes


def prime_factorization(n):
    """
    returns list[1] of prime factors of number n [0]
    """
    # primeslist = primes(100)
    if n == 1:
        return n, [1]
    number = n
    factors = []
    i = 0
    while number not in primeslist:
        # print(i)
        if number % primeslist[i] == 0:
            number = number // primeslist[i]
            # print("ble", primes[i], number)
            factors.append(primeslist[i])
            i = 0
        else:
            i += 1
    factors.append(number)
    return n, factors


def count_prime_divisors(l):
    """
    counts multiplicity of prime divisors
    """
    factors_powers = []
    for i in range(len(l)):
        n = l[i]
        count = l.count(n)
        factors_powers.append((n, count))
    return list(set(factors_powers))


def count_divisors(l):
    """
    returns product of (multiplicities + 1) which is equal to number of divisors
    """
    divisors = 1
    for i in range(len(l)):
        divisors *= l[i][1] + 1
    return divisors


def triangle_n(n):
    return n*(n + 1)//2


# number = prime_factorization(754606)
# print('number', number)
# print(count_prime_divisors(number[1]))
# print(count_divisors(count_prime_divisors(number[1])))
# (triangle_n(100))
primeslist = primes(1500)

divisors = 0
n = 2
while divisors <= 500:
    triangel_number = triangle_n(n)
    list_of_prime_divisors = prime_factorization(triangel_number)
    prime_divisors = count_prime_divisors(list_of_prime_divisors[1])
    divisors = count_divisors(prime_divisors)
    # print (n, triangel_number, divisors)
    n += 1
print (n, triangel_number, divisors)
